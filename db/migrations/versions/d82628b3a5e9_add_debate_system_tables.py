"""add debate system tables

Revision ID: d82628b3a5e9
Revises: 2b0d8865f512
Create Date: 2025-08-27 10:11:44.453402

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'd82628b3a5e9'
down_revision: Union[str, Sequence[str], None] = '2b0d8865f512'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('agent_performance_history',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.String(length=100), nullable=False),
    sa.Column('agent_name', sa.String(length=200), nullable=True),
    sa.Column('agent_version', sa.String(length=50), nullable=True),
    sa.Column('period_start', sa.DateTime(), nullable=False),
    sa.Column('period_end', sa.DateTime(), nullable=False),
    sa.Column('debates_participated', sa.Integer(), nullable=True),
    sa.Column('total_messages_sent', sa.Integer(), nullable=True),
    sa.Column('avg_messages_per_debate', sa.Float(), nullable=True),
    sa.Column('avg_confidence_score', sa.Float(), nullable=True),
    sa.Column('avg_evidence_quality', sa.Float(), nullable=True),
    sa.Column('avg_response_time', sa.Float(), nullable=True),
    sa.Column('consensus_contributions', sa.Integer(), nullable=True),
    sa.Column('successful_challenges', sa.Integer(), nullable=True),
    sa.Column('positions_defended', sa.Integer(), nullable=True),
    sa.Column('minority_positions_held', sa.Integer(), nullable=True),
    sa.Column('accuracy_score', sa.Float(), nullable=True),
    sa.Column('user_satisfaction_score', sa.Float(), nullable=True),
    sa.Column('implementation_success_rate', sa.Float(), nullable=True),
    sa.Column('specialization_areas', sa.JSON(), nullable=True),
    sa.Column('weakness_areas', sa.JSON(), nullable=True),
    sa.Column('synergy_scores', sa.JSON(), nullable=True),
    sa.Column('avg_civility_score', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_performance_accuracy', 'agent_performance_history', ['accuracy_score'], unique=False)
    op.create_index('idx_performance_agent_period', 'agent_performance_history', ['agent_id', 'period_start'], unique=False)
    op.create_index(op.f('ix_agent_performance_history_agent_id'), 'agent_performance_history', ['agent_id'], unique=False)
    op.create_index(op.f('ix_agent_performance_history_period_start'), 'agent_performance_history', ['period_start'], unique=False)
    op.create_table('debate_templates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=200), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('query_template', sa.Text(), nullable=False),
    sa.Column('recommended_agents', sa.JSON(), nullable=True),
    sa.Column('default_rounds', sa.Integer(), nullable=True),
    sa.Column('urgency_level', sa.String(length=20), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=True),
    sa.Column('avg_success_rate', sa.Float(), nullable=True),
    sa.Column('avg_user_rating', sa.Float(), nullable=True),
    sa.Column('required_parameters', sa.JSON(), nullable=True),
    sa.Column('optional_parameters', sa.JSON(), nullable=True),
    sa.Column('validation_rules', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_public', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_templates_category_active', 'debate_templates', ['category', 'is_active'], unique=False)
    op.create_index('idx_templates_usage_rating', 'debate_templates', ['usage_count', 'avg_user_rating'], unique=False)
    op.create_index(op.f('ix_debate_templates_category'), 'debate_templates', ['category'], unique=False)
    op.create_index(op.f('ix_debate_templates_name'), 'debate_templates', ['name'], unique=False)
    op.create_table('debates',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('portfolio_id', sa.Integer(), nullable=True),
    sa.Column('query', sa.Text(), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('max_rounds', sa.Integer(), nullable=True),
    sa.Column('require_unanimous_consensus', sa.Boolean(), nullable=True),
    sa.Column('include_minority_report', sa.Boolean(), nullable=True),
    sa.Column('urgency_level', sa.String(length=20), nullable=True),
    sa.Column('max_duration_seconds', sa.Integer(), nullable=True),
    sa.Column('status', sa.Enum('PENDING', 'ACTIVE', 'PAUSED', 'COMPLETED', 'CANCELLED', 'ERROR', name='debatestatus'), nullable=True),
    sa.Column('current_stage', sa.Enum('POSITION_FORMATION', 'CHALLENGE_ROUND', 'RESPONSE_ROUND', 'CONSENSUS_BUILDING', 'FINAL_STATEMENTS', 'COMPLETED', name='debatestage'), nullable=True),
    sa.Column('current_round', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('last_activity_at', sa.DateTime(), nullable=True),
    sa.Column('consensus_type', sa.Enum('UNANIMOUS', 'MAJORITY', 'PLURALITY', 'NO_CONSENSUS', name='consensustype'), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('final_recommendation', sa.JSON(), nullable=True),
    sa.Column('minority_opinions', sa.JSON(), nullable=True),
    sa.Column('implementation_guidance', sa.JSON(), nullable=True),
    sa.Column('total_messages', sa.Integer(), nullable=True),
    sa.Column('total_evidence_items', sa.Integer(), nullable=True),
    sa.Column('participant_count', sa.Integer(), nullable=True),
    sa.Column('duration_seconds', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['portfolio_id'], ['portfolios.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_debates_created_status', 'debates', ['created_at', 'status'], unique=False)
    op.create_index('idx_debates_portfolio_status', 'debates', ['portfolio_id', 'status'], unique=False)
    op.create_index('idx_debates_user_status', 'debates', ['user_id', 'status'], unique=False)
    op.create_index(op.f('ix_debates_created_at'), 'debates', ['created_at'], unique=False)
    op.create_index(op.f('ix_debates_portfolio_id'), 'debates', ['portfolio_id'], unique=False)
    op.create_index(op.f('ix_debates_status'), 'debates', ['status'], unique=False)
    op.create_index(op.f('ix_debates_user_id'), 'debates', ['user_id'], unique=False)
    op.create_table('consensus_items',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('debate_id', sa.UUID(), nullable=False),
    sa.Column('topic', sa.String(length=500), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('category', sa.String(length=100), nullable=True),
    sa.Column('support_count', sa.Integer(), nullable=True),
    sa.Column('oppose_count', sa.Integer(), nullable=True),
    sa.Column('neutral_count', sa.Integer(), nullable=True),
    sa.Column('total_participants', sa.Integer(), nullable=False),
    sa.Column('agreement_percentage', sa.Float(), nullable=True),
    sa.Column('consensus_strength', sa.String(length=50), nullable=True),
    sa.Column('supporting_evidence', sa.JSON(), nullable=True),
    sa.Column('dissenting_evidence', sa.JSON(), nullable=True),
    sa.Column('first_mentioned_at', sa.DateTime(), nullable=True),
    sa.Column('consensus_reached_at', sa.DateTime(), nullable=True),
    sa.Column('final_vote_at', sa.DateTime(), nullable=True),
    sa.Column('implementation_priority', sa.String(length=20), nullable=True),
    sa.Column('implementation_complexity', sa.String(length=20), nullable=True),
    sa.Column('expected_impact', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['debate_id'], ['debates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_consensus_agreement', 'consensus_items', ['agreement_percentage'], unique=False)
    op.create_index('idx_consensus_debate_category', 'consensus_items', ['debate_id', 'category'], unique=False)
    op.create_index(op.f('ix_consensus_items_debate_id'), 'consensus_items', ['debate_id'], unique=False)
    op.create_table('debate_analytics',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('debate_id', sa.UUID(), nullable=False),
    sa.Column('avg_messages_per_participant', sa.Float(), nullable=True),
    sa.Column('avg_response_time_seconds', sa.Float(), nullable=True),
    sa.Column('participation_balance_score', sa.Float(), nullable=True),
    sa.Column('avg_evidence_quality', sa.Float(), nullable=True),
    sa.Column('avg_confidence_score', sa.Float(), nullable=True),
    sa.Column('argument_coherence_score', sa.Float(), nullable=True),
    sa.Column('time_to_consensus_seconds', sa.Float(), nullable=True),
    sa.Column('consensus_stability_score', sa.Float(), nullable=True),
    sa.Column('minority_accommodation_score', sa.Float(), nullable=True),
    sa.Column('messages_per_consensus_point', sa.Float(), nullable=True),
    sa.Column('debate_efficiency_score', sa.Float(), nullable=True),
    sa.Column('rounds_to_completion', sa.Integer(), nullable=True),
    sa.Column('avg_sentiment_score', sa.Float(), nullable=True),
    sa.Column('sentiment_volatility', sa.Float(), nullable=True),
    sa.Column('civility_score', sa.Float(), nullable=True),
    sa.Column('topics_covered', sa.JSON(), nullable=True),
    sa.Column('topic_depth_scores', sa.JSON(), nullable=True),
    sa.Column('evidence_diversity_score', sa.Float(), nullable=True),
    sa.Column('agent_performance_scores', sa.JSON(), nullable=True),
    sa.Column('agent_synergy_scores', sa.JSON(), nullable=True),
    sa.Column('implementation_clarity_score', sa.Float(), nullable=True),
    sa.Column('recommendation_specificity', sa.Float(), nullable=True),
    sa.Column('actionability_score', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['debate_id'], ['debates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_debate_analytics_debate_id'), 'debate_analytics', ['debate_id'], unique=True)
    op.create_table('debate_participants',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('debate_id', sa.UUID(), nullable=False),
    sa.Column('agent_id', sa.String(length=100), nullable=False),
    sa.Column('agent_name', sa.String(length=200), nullable=True),
    sa.Column('agent_type', sa.String(length=100), nullable=True),
    sa.Column('agent_specialization', sa.String(length=200), nullable=True),
    sa.Column('role', sa.String(length=50), nullable=True),
    sa.Column('joined_at', sa.DateTime(), nullable=True),
    sa.Column('last_active_at', sa.DateTime(), nullable=True),
    sa.Column('messages_sent', sa.Integer(), nullable=True),
    sa.Column('evidence_provided', sa.Integer(), nullable=True),
    sa.Column('challenges_issued', sa.Integer(), nullable=True),
    sa.Column('challenges_received', sa.Integer(), nullable=True),
    sa.Column('responses_given', sa.Integer(), nullable=True),
    sa.Column('avg_confidence_score', sa.Float(), nullable=True),
    sa.Column('avg_response_time_seconds', sa.Float(), nullable=True),
    sa.Column('final_position', sa.JSON(), nullable=True),
    sa.Column('consensus_agreement', sa.Boolean(), nullable=True),
    sa.Column('minority_position', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['debate_id'], ['debates.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_participants_agent_joined', 'debate_participants', ['agent_id', 'joined_at'], unique=False)
    op.create_index('idx_participants_debate_agent', 'debate_participants', ['debate_id', 'agent_id'], unique=False)
    op.create_index(op.f('ix_debate_participants_agent_id'), 'debate_participants', ['agent_id'], unique=False)
    op.create_index(op.f('ix_debate_participants_debate_id'), 'debate_participants', ['debate_id'], unique=False)
    op.create_table('consensus_votes',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('consensus_item_id', sa.UUID(), nullable=False),
    sa.Column('participant_id', sa.UUID(), nullable=False),
    sa.Column('vote', sa.String(length=20), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=True),
    sa.Column('reasoning', sa.Text(), nullable=True),
    sa.Column('voted_at', sa.DateTime(), nullable=True),
    sa.Column('changed_vote', sa.Boolean(), nullable=True),
    sa.Column('final_vote', sa.Boolean(), nullable=True),
    sa.Column('supporting_evidence', sa.JSON(), nullable=True),
    sa.Column('concerns', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['consensus_item_id'], ['consensus_items.id'], ),
    sa.ForeignKeyConstraint(['participant_id'], ['debate_participants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_votes_item_participant', 'consensus_votes', ['consensus_item_id', 'participant_id'], unique=False)
    op.create_index(op.f('ix_consensus_votes_consensus_item_id'), 'consensus_votes', ['consensus_item_id'], unique=False)
    op.create_index(op.f('ix_consensus_votes_participant_id'), 'consensus_votes', ['participant_id'], unique=False)
    op.create_table('debate_messages',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('debate_id', sa.UUID(), nullable=False),
    sa.Column('sender_id', sa.UUID(), nullable=False),
    sa.Column('message_type', sa.Enum('POSITION', 'CHALLENGE', 'RESPONSE', 'EVIDENCE', 'CONSENSUS_CHECK', 'FINAL_STATEMENT', name='messagetype'), nullable=False),
    sa.Column('round_number', sa.Integer(), nullable=False),
    sa.Column('stage', sa.Enum('POSITION_FORMATION', 'CHALLENGE_ROUND', 'RESPONSE_ROUND', 'CONSENSUS_BUILDING', 'FINAL_STATEMENTS', 'COMPLETED', name='debatestage'), nullable=False),
    sa.Column('sequence_number', sa.Integer(), nullable=False),
    sa.Column('content', sa.JSON(), nullable=False),
    sa.Column('evidence_sources', sa.JSON(), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('parent_message_id', sa.UUID(), nullable=True),
    sa.Column('recipient_id', sa.UUID(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('processed_at', sa.DateTime(), nullable=True),
    sa.Column('response_deadline', sa.DateTime(), nullable=True),
    sa.Column('sentiment_score', sa.Float(), nullable=True),
    sa.Column('complexity_score', sa.Float(), nullable=True),
    sa.Column('evidence_quality_score', sa.Float(), nullable=True),
    sa.Column('responses_received', sa.Integer(), nullable=True),
    sa.Column('challenges_generated', sa.Integer(), nullable=True),
    sa.Column('consensus_impact', sa.Float(), nullable=True),
    sa.ForeignKeyConstraint(['debate_id'], ['debates.id'], ),
    sa.ForeignKeyConstraint(['parent_message_id'], ['debate_messages.id'], ),
    sa.ForeignKeyConstraint(['recipient_id'], ['debate_participants.id'], ),
    sa.ForeignKeyConstraint(['sender_id'], ['debate_participants.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_messages_debate_round', 'debate_messages', ['debate_id', 'round_number'], unique=False)
    op.create_index('idx_messages_debate_type', 'debate_messages', ['debate_id', 'message_type'], unique=False)
    op.create_index('idx_messages_sender_created', 'debate_messages', ['sender_id', 'created_at'], unique=False)
    op.create_index('idx_messages_stage_sequence', 'debate_messages', ['stage', 'sequence_number'], unique=False)
    op.create_index(op.f('ix_debate_messages_created_at'), 'debate_messages', ['created_at'], unique=False)
    op.create_index(op.f('ix_debate_messages_debate_id'), 'debate_messages', ['debate_id'], unique=False)
    op.create_index(op.f('ix_debate_messages_message_type'), 'debate_messages', ['message_type'], unique=False)
    op.create_index(op.f('ix_debate_messages_parent_message_id'), 'debate_messages', ['parent_message_id'], unique=False)
    op.create_index(op.f('ix_debate_messages_recipient_id'), 'debate_messages', ['recipient_id'], unique=False)
    op.create_index(op.f('ix_debate_messages_round_number'), 'debate_messages', ['round_number'], unique=False)
    op.create_index(op.f('ix_debate_messages_sender_id'), 'debate_messages', ['sender_id'], unique=False)
    op.drop_index(op.f('ix_debate_rounds_debate_id'), table_name='debate_rounds')
    op.drop_index(op.f('ix_debate_rounds_id'), table_name='debate_rounds')
    op.drop_table('debate_rounds')
    op.drop_index(op.f('ix_agent_debates_debate_id'), table_name='agent_debates')
    op.drop_index(op.f('ix_agent_debates_id'), table_name='agent_debates')
    op.drop_index(op.f('ix_agent_debates_status'), table_name='agent_debates')
    op.drop_index(op.f('ix_agent_debates_user_id'), table_name='agent_debates')
    op.drop_table('agent_debates')
    op.drop_index(op.f('idx_agent_performance_agent_capability'), table_name='agent_performance_metrics')
    op.alter_column('holdings', 'portfolio_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('holdings', 'asset_id',
               existing_type=sa.INTEGER(),
               nullable=False)
    op.alter_column('holdings', 'purchase_price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.drop_column('holdings', 'quantity')
    op.alter_column('portfolio_risk_snapshots', 'beta',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=False)
    op.drop_index(op.f('idx_risk_snapshots_portfolio_date'), table_name='portfolio_risk_snapshots')
    op.drop_index(op.f('idx_risk_snapshots_user_date'), table_name='portfolio_risk_snapshots')
    op.create_index(op.f('ix_portfolio_risk_snapshots_portfolio_id'), 'portfolio_risk_snapshots', ['portfolio_id'], unique=False)
    op.create_index(op.f('ix_portfolio_risk_snapshots_snapshot_date'), 'portfolio_risk_snapshots', ['snapshot_date'], unique=False)
    op.drop_index(op.f('idx_price_data_cache_symbol_expires'), table_name='price_data_cache')
    op.create_index(op.f('ix_price_data_cache_expires_at'), 'price_data_cache', ['expires_at'], unique=False)
    op.create_index(op.f('ix_price_data_cache_fetched_at'), 'price_data_cache', ['fetched_at'], unique=False)
    op.create_index(op.f('ix_price_data_cache_id'), 'price_data_cache', ['id'], unique=False)
    op.create_index(op.f('ix_price_data_cache_symbol'), 'price_data_cache', ['symbol'], unique=False)
    op.create_index(op.f('ix_risk_thresholds_id'), 'risk_thresholds', ['id'], unique=False)
    op.create_index(op.f('ix_risk_thresholds_metric_name'), 'risk_thresholds', ['metric_name'], unique=False)
    op.create_index(op.f('ix_risk_thresholds_portfolio_id'), 'risk_thresholds', ['portfolio_id'], unique=False)
    op.create_index(op.f('ix_risk_thresholds_user_id'), 'risk_thresholds', ['user_id'], unique=False)
    op.drop_constraint(op.f('risk_thresholds_user_id_fkey'), 'risk_thresholds', type_='foreignkey')
    op.drop_constraint(op.f('risk_thresholds_portfolio_id_fkey'), 'risk_thresholds', type_='foreignkey')
    op.drop_constraint(op.f('risk_thresholds_created_by_fkey'), 'risk_thresholds', type_='foreignkey')
    op.create_foreign_key(None, 'risk_thresholds', 'users', ['user_id'], ['id'])
    op.create_foreign_key(None, 'risk_thresholds', 'users', ['created_by'], ['id'])
    op.create_foreign_key(None, 'risk_thresholds', 'portfolios', ['portfolio_id'], ['id'])
    op.drop_index(op.f('idx_risk_trends_portfolio_metric'), table_name='risk_trends')
    op.create_index(op.f('ix_risk_trends_id'), 'risk_trends', ['id'], unique=False)
    op.create_index(op.f('ix_risk_trends_metric_name'), 'risk_trends', ['metric_name'], unique=False)
    op.create_index(op.f('ix_risk_trends_portfolio_id'), 'risk_trends', ['portfolio_id'], unique=False)
    op.drop_constraint(op.f('risk_trends_portfolio_id_fkey'), 'risk_trends', type_='foreignkey')
    op.create_foreign_key(None, 'risk_trends', 'portfolios', ['portfolio_id'], ['id'])
    op.drop_index(op.f('idx_workflow_sessions_type_mode'), table_name='workflow_sessions')
    op.drop_index(op.f('idx_workflow_sessions_user_state'), table_name='workflow_sessions')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_workflow_sessions_user_state'), 'workflow_sessions', ['user_id', 'state', sa.literal_column('created_at DESC')], unique=False)
    op.create_index(op.f('idx_workflow_sessions_type_mode'), 'workflow_sessions', ['workflow_type', 'execution_mode'], unique=False)
    op.drop_constraint(None, 'risk_trends', type_='foreignkey')
    op.create_foreign_key(op.f('risk_trends_portfolio_id_fkey'), 'risk_trends', 'portfolios', ['portfolio_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_risk_trends_portfolio_id'), table_name='risk_trends')
    op.drop_index(op.f('ix_risk_trends_metric_name'), table_name='risk_trends')
    op.drop_index(op.f('ix_risk_trends_id'), table_name='risk_trends')
    op.create_index(op.f('idx_risk_trends_portfolio_metric'), 'risk_trends', ['portfolio_id', 'metric_name'], unique=False)
    op.drop_constraint(None, 'risk_thresholds', type_='foreignkey')
    op.drop_constraint(None, 'risk_thresholds', type_='foreignkey')
    op.drop_constraint(None, 'risk_thresholds', type_='foreignkey')
    op.create_foreign_key(op.f('risk_thresholds_created_by_fkey'), 'risk_thresholds', 'users', ['created_by'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(op.f('risk_thresholds_portfolio_id_fkey'), 'risk_thresholds', 'portfolios', ['portfolio_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(op.f('risk_thresholds_user_id_fkey'), 'risk_thresholds', 'users', ['user_id'], ['id'], ondelete='CASCADE')
    op.drop_index(op.f('ix_risk_thresholds_user_id'), table_name='risk_thresholds')
    op.drop_index(op.f('ix_risk_thresholds_portfolio_id'), table_name='risk_thresholds')
    op.drop_index(op.f('ix_risk_thresholds_metric_name'), table_name='risk_thresholds')
    op.drop_index(op.f('ix_risk_thresholds_id'), table_name='risk_thresholds')
    op.drop_index(op.f('ix_price_data_cache_symbol'), table_name='price_data_cache')
    op.drop_index(op.f('ix_price_data_cache_id'), table_name='price_data_cache')
    op.drop_index(op.f('ix_price_data_cache_fetched_at'), table_name='price_data_cache')
    op.drop_index(op.f('ix_price_data_cache_expires_at'), table_name='price_data_cache')
    op.create_index(op.f('idx_price_data_cache_symbol_expires'), 'price_data_cache', ['symbol', 'expires_at'], unique=False)
    op.drop_index(op.f('ix_portfolio_risk_snapshots_snapshot_date'), table_name='portfolio_risk_snapshots')
    op.drop_index(op.f('ix_portfolio_risk_snapshots_portfolio_id'), table_name='portfolio_risk_snapshots')
    op.create_index(op.f('idx_risk_snapshots_user_date'), 'portfolio_risk_snapshots', ['user_id', sa.literal_column('snapshot_date DESC')], unique=False)
    op.create_index(op.f('idx_risk_snapshots_portfolio_date'), 'portfolio_risk_snapshots', ['portfolio_id', sa.literal_column('snapshot_date DESC')], unique=False)
    op.alter_column('portfolio_risk_snapshots', 'beta',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.add_column('holdings', sa.Column('quantity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True))
    op.alter_column('holdings', 'purchase_price',
               existing_type=sa.DOUBLE_PRECISION(precision=53),
               nullable=True)
    op.alter_column('holdings', 'asset_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.alter_column('holdings', 'portfolio_id',
               existing_type=sa.INTEGER(),
               nullable=True)
    op.create_index(op.f('idx_agent_performance_agent_capability'), 'agent_performance_metrics', ['agent_id', 'capability', sa.literal_column('created_at DESC')], unique=False)
    op.create_table('agent_debates',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('agent_debates_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('debate_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('topic', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('participants', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('current_stage', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('urgency_level', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='agent_debates_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='agent_debates_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_agent_debates_user_id'), 'agent_debates', ['user_id'], unique=False)
    op.create_index(op.f('ix_agent_debates_status'), 'agent_debates', ['status'], unique=False)
    op.create_index(op.f('ix_agent_debates_id'), 'agent_debates', ['id'], unique=False)
    op.create_index(op.f('ix_agent_debates_debate_id'), 'agent_debates', ['debate_id'], unique=True)
    op.create_table('debate_rounds',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('debate_id', sa.VARCHAR(length=36), autoincrement=False, nullable=False),
    sa.Column('round_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stage', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('positions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('challenges', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('responses', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('round_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_seconds', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['debate_id'], ['agent_debates.debate_id'], name=op.f('debate_rounds_debate_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('debate_rounds_pkey'))
    )
    op.create_index(op.f('ix_debate_rounds_id'), 'debate_rounds', ['id'], unique=False)
    op.create_index(op.f('ix_debate_rounds_debate_id'), 'debate_rounds', ['debate_id'], unique=False)
    op.drop_index(op.f('ix_debate_messages_sender_id'), table_name='debate_messages')
    op.drop_index(op.f('ix_debate_messages_round_number'), table_name='debate_messages')
    op.drop_index(op.f('ix_debate_messages_recipient_id'), table_name='debate_messages')
    op.drop_index(op.f('ix_debate_messages_parent_message_id'), table_name='debate_messages')
    op.drop_index(op.f('ix_debate_messages_message_type'), table_name='debate_messages')
    op.drop_index(op.f('ix_debate_messages_debate_id'), table_name='debate_messages')
    op.drop_index(op.f('ix_debate_messages_created_at'), table_name='debate_messages')
    op.drop_index('idx_messages_stage_sequence', table_name='debate_messages')
    op.drop_index('idx_messages_sender_created', table_name='debate_messages')
    op.drop_index('idx_messages_debate_type', table_name='debate_messages')
    op.drop_index('idx_messages_debate_round', table_name='debate_messages')
    op.drop_table('debate_messages')
    op.drop_index(op.f('ix_consensus_votes_participant_id'), table_name='consensus_votes')
    op.drop_index(op.f('ix_consensus_votes_consensus_item_id'), table_name='consensus_votes')
    op.drop_index('idx_votes_item_participant', table_name='consensus_votes')
    op.drop_table('consensus_votes')
    op.drop_index(op.f('ix_debate_participants_debate_id'), table_name='debate_participants')
    op.drop_index(op.f('ix_debate_participants_agent_id'), table_name='debate_participants')
    op.drop_index('idx_participants_debate_agent', table_name='debate_participants')
    op.drop_index('idx_participants_agent_joined', table_name='debate_participants')
    op.drop_table('debate_participants')
    op.drop_index(op.f('ix_debate_analytics_debate_id'), table_name='debate_analytics')
    op.drop_table('debate_analytics')
    op.drop_index(op.f('ix_consensus_items_debate_id'), table_name='consensus_items')
    op.drop_index('idx_consensus_debate_category', table_name='consensus_items')
    op.drop_index('idx_consensus_agreement', table_name='consensus_items')
    op.drop_table('consensus_items')
    op.drop_index(op.f('ix_debates_user_id'), table_name='debates')
    op.drop_index(op.f('ix_debates_status'), table_name='debates')
    op.drop_index(op.f('ix_debates_portfolio_id'), table_name='debates')
    op.drop_index(op.f('ix_debates_created_at'), table_name='debates')
    op.drop_index('idx_debates_user_status', table_name='debates')
    op.drop_index('idx_debates_portfolio_status', table_name='debates')
    op.drop_index('idx_debates_created_status', table_name='debates')
    op.drop_table('debates')
    op.drop_index(op.f('ix_debate_templates_name'), table_name='debate_templates')
    op.drop_index(op.f('ix_debate_templates_category'), table_name='debate_templates')
    op.drop_index('idx_templates_usage_rating', table_name='debate_templates')
    op.drop_index('idx_templates_category_active', table_name='debate_templates')
    op.drop_table('debate_templates')
    op.drop_index(op.f('ix_agent_performance_history_period_start'), table_name='agent_performance_history')
    op.drop_index(op.f('ix_agent_performance_history_agent_id'), table_name='agent_performance_history')
    op.drop_index('idx_performance_agent_period', table_name='agent_performance_history')
    op.drop_index('idx_performance_accuracy', table_name='agent_performance_history')
    op.drop_table('agent_performance_history')
    # ### end Alembic commands ###
